{
  "version": 3,
  "sources": ["../../audio-loader/lib/base64.js", "../../audio-loader/lib/fetch.js", "../../audio-loader/lib/index.js", "../../adsr/index.js", "../../sample-player/lib/player.js", "../../sample-player/lib/events.js", "../../sample-player/node_modules/note-parser/index.js", "../../sample-player/lib/notes.js", "../../sample-player/lib/scheduler.js", "../../midimessage/dist/index.min.js", "../../sample-player/lib/midi.js", "../../sample-player/lib/index.js", "../../note-parser/index.js", "../../soundfont-player/lib/legacy.js", "../../soundfont-player/lib/index.js"],
  "sourcesContent": ["'use strict'\n\n// DECODE UTILITIES\nfunction b64ToUint6 (nChr) {\n  return nChr > 64 && nChr < 91 ? nChr - 65\n    : nChr > 96 && nChr < 123 ? nChr - 71\n    : nChr > 47 && nChr < 58 ? nChr + 4\n    : nChr === 43 ? 62\n    : nChr === 47 ? 63\n    : 0\n}\n\n// Decode Base64 to Uint8Array\n// ---------------------------\nfunction decode (sBase64, nBlocksSize) {\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, '')\n  var nInLen = sB64Enc.length\n  var nOutLen = nBlocksSize\n    ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize\n    : nInLen * 3 + 1 >> 2\n  var taBytes = new Uint8Array(nOutLen)\n\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n    nMod4 = nInIdx & 3\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255\n      }\n      nUint24 = 0\n    }\n  }\n  return taBytes\n}\n\nmodule.exports = { decode: decode }\n", "/* global XMLHttpRequest */\n'use strict'\n\n/**\n * Given a url and a return type, returns a promise to the content of the url\n * Basically it wraps a XMLHttpRequest into a Promise\n *\n * @param {String} url\n * @param {String} type - can be 'text' or 'arraybuffer'\n * @return {Promise}\n */\nmodule.exports = function (url, type) {\n  return new Promise(function (done, reject) {\n    var req = new XMLHttpRequest()\n    if (type) req.responseType = type\n\n    req.open('GET', url)\n    req.onload = function () {\n      req.status === 200 ? done(req.response) : reject(Error(req.statusText))\n    }\n    req.onerror = function () { reject(Error('Network Error')) }\n    req.send()\n  })\n}\n", "'use strict'\n\nvar base64 = require('./base64')\nvar fetch = require('./fetch')\n\n// Given a regex, return a function that test if against a string\nfunction fromRegex (r) {\n  return function (o) { return typeof o === 'string' && r.test(o) }\n}\n// Try to apply a prefix to a name\nfunction prefix (pre, name) {\n  return typeof pre === 'string' ? pre + name\n    : typeof pre === 'function' ? pre(name)\n    : name\n}\n\n/**\n * Load one or more audio files\n *\n *\n * Possible option keys:\n *\n * - __from__ {Function|String}: a function or string to convert from file names to urls.\n * If is a string it will be prefixed to the name:\n * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`\n * If it's a function it receives the file name and should return the url as string.\n * - __only__ {Array} - when loading objects, if provided, only the given keys\n * will be included in the decoded object:\n * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`\n *\n * @param {AudioContext} ac - the audio context\n * @param {Object} source - the object to be loaded\n * @param {Object} options - (Optional) the load options for that object\n * @param {Object} defaultValue - (Optional) the default value to return as\n * in a promise if not valid loader found\n */\nfunction load (ac, source, options, defVal) {\n  var loader =\n    // Basic audio loading\n      isArrayBuffer(source) ? loadArrayBuffer\n    : isAudioFileName(source) ? loadAudioFile\n    : isPromise(source) ? loadPromise\n    // Compound objects\n    : isArray(source) ? loadArrayData\n    : isObject(source) ? loadObjectData\n    : isJsonFileName(source) ? loadJsonFile\n    // Base64 encoded audio\n    : isBase64Audio(source) ? loadBase64Audio\n    : isJsFileName(source) ? loadMidiJSFile\n    : null\n\n  var opts = options || {}\n  return loader ? loader(ac, source, opts)\n    : defVal ? Promise.resolve(defVal)\n    : Promise.reject('Source not valid (' + source + ')')\n}\nload.fetch = fetch\n\n// BASIC AUDIO LOADING\n// ===================\n\n// Load (decode) an array buffer\nfunction isArrayBuffer (o) { return o instanceof ArrayBuffer }\nfunction loadArrayBuffer (ac, array, options) {\n  return new Promise(function (done, reject) {\n    ac.decodeAudioData(array,\n      function (buffer) { done(buffer) },\n      function () { reject(\"Can't decode audio data (\" + array.slice(0, 30) + '...)') }\n    )\n  })\n}\n\n// Load an audio filename\nvar isAudioFileName = fromRegex(/\\.(mp3|wav|ogg)(\\?.*)?$/i)\nfunction loadAudioFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'arraybuffer'), options)\n}\n\n// Load the result of a promise\nfunction isPromise (o) { return o && typeof o.then === 'function' }\nfunction loadPromise (ac, promise, options) {\n  return promise.then(function (value) {\n    return load(ac, value, options)\n  })\n}\n\n// COMPOUND OBJECTS\n// ================\n\n// Try to load all the items of an array\nvar isArray = Array.isArray\nfunction loadArrayData (ac, array, options) {\n  return Promise.all(array.map(function (data) {\n    return load(ac, data, options, data)\n  }))\n}\n\n// Try to load all the values of a key/value object\nfunction isObject (o) { return o && typeof o === 'object' }\nfunction loadObjectData (ac, obj, options) {\n  var dest = {}\n  var promises = Object.keys(obj).map(function (key) {\n    if (options.only && options.only.indexOf(key) === -1) return null\n    var value = obj[key]\n    return load(ac, value, options, value).then(function (audio) {\n      dest[key] = audio\n    })\n  })\n  return Promise.all(promises).then(function () { return dest })\n}\n\n// Load the content of a JSON file\nvar isJsonFileName = fromRegex(/\\.json(\\?.*)?$/i)\nfunction loadJsonFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'text').then(JSON.parse), options)\n}\n\n// BASE64 ENCODED FORMATS\n// ======================\n\n// Load strings with Base64 encoded audio\nvar isBase64Audio = fromRegex(/^data:audio/)\nfunction loadBase64Audio (ac, source, options) {\n  var i = source.indexOf(',')\n  return load(ac, base64.decode(source.slice(i + 1)).buffer, options)\n}\n\n// Load .js files with MidiJS soundfont prerendered audio\nvar isJsFileName = fromRegex(/\\.js(\\?.*)?$/i)\nfunction loadMidiJSFile (ac, name, options) {\n  var url = prefix(options.from, name)\n  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options)\n}\n\n// convert a MIDI.js javascript soundfont file to json\nfunction midiJsToJson (data) {\n  var begin = data.indexOf('MIDI.Soundfont.')\n  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format')\n  begin = data.indexOf('=', begin) + 2\n  var end = data.lastIndexOf(',')\n  return JSON.parse(data.slice(begin, end) + '}')\n}\n\nif (typeof module === 'object' && module.exports) module.exports = load\nif (typeof window !== 'undefined') window.loadAudio = load\n", "module.exports = ADSR\n\nfunction ADSR(audioContext){\n  var node = audioContext.createGain()\n\n  var voltage = node._voltage = getVoltage(audioContext)\n  var value = scale(voltage)\n  var startValue = scale(voltage)\n  var endValue = scale(voltage)\n\n  node._startAmount = scale(startValue)\n  node._endAmount = scale(endValue)\n\n  node._multiplier = scale(value)\n  node._multiplier.connect(node)\n  node._startAmount.connect(node)\n  node._endAmount.connect(node)\n\n  node.value = value.gain\n  node.startValue = startValue.gain\n  node.endValue = endValue.gain\n\n  node.startValue.value = 0\n  node.endValue.value = 0\n\n  Object.defineProperties(node, props)\n  return node\n}\n\nvar props = {\n\n  attack: { value: 0, writable: true },\n  decay: { value: 0, writable: true },\n  sustain: { value: 1, writable: true },\n  release: {value: 0, writable: true },\n\n  getReleaseDuration: {\n    value: function(){\n      return this.release\n    }\n  },\n\n  start: {\n    value: function(at){\n      var target = this._multiplier.gain\n      var startAmount = this._startAmount.gain\n      var endAmount = this._endAmount.gain\n\n      this._voltage.start(at)\n      this._decayFrom = this._decayFrom = at+this.attack\n      this._startedAt = at\n\n      var sustain = this.sustain\n\n      target.cancelScheduledValues(at)\n      startAmount.cancelScheduledValues(at)\n      endAmount.cancelScheduledValues(at)\n\n      endAmount.setValueAtTime(0, at)\n\n      if (this.attack){\n        target.setValueAtTime(0, at)\n        target.linearRampToValueAtTime(1, at + this.attack)\n\n        startAmount.setValueAtTime(1, at)\n        startAmount.linearRampToValueAtTime(0, at + this.attack)\n      } else {\n        target.setValueAtTime(1, at)\n        startAmount.setValueAtTime(0, at)\n      }\n\n      if (this.decay){\n        target.setTargetAtTime(sustain, this._decayFrom, getTimeConstant(this.decay))\n      }\n    }\n  },\n\n  stop: {\n    value: function(at, isTarget){\n      if (isTarget){\n        at = at - this.release\n      }\n\n      var endTime = at + this.release\n      if (this.release){\n\n        var target = this._multiplier.gain\n        var startAmount = this._startAmount.gain\n        var endAmount = this._endAmount.gain\n\n        target.cancelScheduledValues(at)\n        startAmount.cancelScheduledValues(at)\n        endAmount.cancelScheduledValues(at)\n\n        var expFalloff = getTimeConstant(this.release)\n\n        // truncate attack (required as linearRamp is removed by cancelScheduledValues)\n        if (this.attack && at < this._decayFrom){\n          var valueAtTime = getValue(0, 1, this._startedAt, this._decayFrom, at)\n          target.linearRampToValueAtTime(valueAtTime, at)\n          startAmount.linearRampToValueAtTime(1-valueAtTime, at)\n          startAmount.setTargetAtTime(0, at, expFalloff)\n        }\n\n        endAmount.setTargetAtTime(1, at, expFalloff)\n        target.setTargetAtTime(0, at, expFalloff)\n      }\n\n      this._voltage.stop(endTime)\n      return endTime\n    }\n  },\n\n  onended: {\n    get: function(){\n      return this._voltage.onended\n    },\n    set: function(value){\n      this._voltage.onended = value\n    }\n  }\n\n}\n\nvar flat = new Float32Array([1,1])\nfunction getVoltage(context){\n  var voltage = context.createBufferSource()\n  var buffer = context.createBuffer(1, 2, context.sampleRate)\n  buffer.getChannelData(0).set(flat)\n  voltage.buffer = buffer\n  voltage.loop = true\n  return voltage\n}\n\nfunction scale(node){\n  var gain = node.context.createGain()\n  node.connect(gain)\n  return gain\n}\n\nfunction getTimeConstant(time){\n  return Math.log(time+1)/Math.log(100)\n}\n\nfunction getValue(start, end, fromTime, toTime, at){\n  var difference = end - start\n  var time = toTime - fromTime\n  var truncateTime = at - fromTime\n  var phase = truncateTime / time\n  var value = start + phase * difference\n\n  if (value <= start) {\n      value = start\n  }\n  if (value >= end) {\n      value = end\n  }\n\n  return value\n}\n", "/* global AudioBuffer */\n'use strict'\n\nvar ADSR = require('adsr')\n\nvar EMPTY = {}\nvar DEFAULTS = {\n  gain: 1,\n  attack: 0.01,\n  decay: 0.1,\n  sustain: 0.9,\n  release: 0.3,\n  loop: false,\n  cents: 0,\n  loopStart: 0,\n  loopEnd: 0\n}\n\n/**\n * Create a sample player.\n *\n * @param {AudioContext} ac - the audio context\n * @param {ArrayBuffer|Object<String,ArrayBuffer>} source\n * @param {Onject} options - (Optional) an options object\n * @return {player} the player\n * @example\n * var SamplePlayer = require('sample-player')\n * var ac = new AudioContext()\n * var snare = SamplePlayer(ac, <AudioBuffer>)\n * snare.play()\n */\nfunction SamplePlayer (ac, source, options) {\n  var connected = false\n  var nextId = 0\n  var tracked = {}\n  var out = ac.createGain()\n  out.gain.value = 1\n\n  var opts = Object.assign({}, DEFAULTS, options)\n\n  /**\n   * @namespace\n   */\n  var player = { context: ac, out: out, opts: opts }\n  if (source instanceof AudioBuffer) player.buffer = source\n  else player.buffers = source\n\n  /**\n   * Start a sample buffer.\n   *\n   * The returned object has a function `stop(when)` to stop the sound.\n   *\n   * @param {String} name - the name of the buffer. If the source of the\n   * SamplePlayer is one sample buffer, this parameter is not required\n   * @param {Float} when - (Optional) when to start (current time if by default)\n   * @param {Object} options - additional sample playing options\n   * @return {AudioNode} an audio node with a `stop` function\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   * sample.start()\n   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer\n   * @example\n   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)\n   * drums.start('snare')\n   * drums.start('snare', 0, { gain: 0.3 })\n   */\n  player.start = function (name, when, options) {\n    // if only one buffer, reorder arguments\n    if (player.buffer && name !== null) return player.start(null, name, when)\n\n    var buffer = name ? player.buffers[name] : player.buffer\n    if (!buffer) {\n      console.warn('Buffer ' + name + ' not found.')\n      return\n    } else if (!connected) {\n      console.warn('SamplePlayer not connected to any node.')\n      return\n    }\n\n    var opts = options || EMPTY\n    when = Math.max(ac.currentTime, when || 0)\n    player.emit('start', when, name, opts)\n    var node = createNode(name, buffer, opts)\n    node.id = track(name, node)\n    node.env.start(when)\n    node.source.start(when)\n    player.emit('started', when, node.id, node)\n    if (opts.duration) node.stop(when + opts.duration)\n    return node\n  }\n\n  // NOTE: start will be override so we can't copy the function reference\n  // this is obviously not a good design, so this code will be gone soon.\n  /**\n   * An alias for `player.start`\n   * @see player.start\n   * @since 0.3.0\n   */\n  player.play = function (name, when, options) {\n    return player.start(name, when, options)\n  }\n\n  /**\n   * Stop some or all samples\n   *\n   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime\n   * if not specified)\n   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop\n   * @return {Array} an array of ids of the stoped samples\n   *\n   * @example\n   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)\n   * longSound.start(ac.currentTime)\n   * longSound.start(ac.currentTime + 1)\n   * longSound.start(ac.currentTime + 2)\n   * longSound.stop(ac.currentTime + 3) // stop the three sounds\n   */\n  player.stop = function (when, ids) {\n    var node\n    ids = ids || Object.keys(tracked)\n    return ids.map(function (id) {\n      node = tracked[id]\n      if (!node) return null\n      node.stop(when)\n      return node.id\n    })\n  }\n  /**\n   * Connect the player to a destination node\n   *\n   * @param {AudioNode} destination - the destination node\n   * @return {AudioPlayer} the player\n   * @chainable\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   */\n  player.connect = function (dest) {\n    connected = true\n    out.connect(dest)\n    return player\n  }\n\n  player.emit = function (event, when, obj, opts) {\n    if (player.onevent) player.onevent(event, when, obj, opts)\n    var fn = player['on' + event]\n    if (fn) fn(when, obj, opts)\n  }\n\n  return player\n\n  // =============== PRIVATE FUNCTIONS ============== //\n\n  function track (name, node) {\n    node.id = nextId++\n    tracked[node.id] = node\n    node.source.onended = function () {\n      var now = ac.currentTime\n      node.source.disconnect()\n      node.env.disconnect()\n      node.disconnect()\n      player.emit('ended', now, node.id, node)\n    }\n    return node.id\n  }\n\n  function createNode (name, buffer, options) {\n    var node = ac.createGain()\n    node.gain.value = 0 // the envelope will control the gain\n    node.connect(out)\n\n    node.env = envelope(ac, options, opts)\n    node.env.connect(node.gain)\n\n    node.source = ac.createBufferSource()\n    node.source.buffer = buffer\n    node.source.connect(node)\n    node.source.loop = options.loop || opts.loop\n    node.source.playbackRate.value = centsToRate(options.cents || opts.cents)\n    node.source.loopStart = options.loopStart || opts.loopStart\n    node.source.loopEnd = options.loopEnd || opts.loopEnd\n    node.stop = function (when) {\n      var time = when || ac.currentTime\n      player.emit('stop', time, name)\n      var stopAt = node.env.stop(time)\n      node.source.stop(stopAt)\n    }\n    return node\n  }\n}\n\nfunction isNum (x) { return typeof x === 'number' }\nvar PARAMS = ['attack', 'decay', 'sustain', 'release']\nfunction envelope (ac, options, opts) {\n  var env = ADSR(ac)\n  var adsr = options.adsr || opts.adsr\n  PARAMS.forEach(function (name, i) {\n    if (adsr) env[name] = adsr[i]\n    else env[name] = options[name] || opts[name]\n  })\n  env.value.value = isNum(options.gain) ? options.gain\n    : isNum(opts.gain) ? opts.gain : 1\n  return env\n}\n\n/*\n * Get playback rate for a given pitch change (in cents)\n * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):\n * f2 = f1 * 2^( C / 1200 )\n */\nfunction centsToRate (cents) { return cents ? Math.pow(2, cents / 1200) : 1 }\n\nmodule.exports = SamplePlayer\n", "\nmodule.exports = function (player) {\n  /**\n   * Adds a listener of an event\n   * @chainable\n   * @param {String} event - the event name\n   * @param {Function} callback - the event handler\n   * @return {SamplePlayer} the player\n   * @example\n   * player.on('start', function(time, note) {\n   *   console.log(time, note)\n   * })\n   */\n  player.on = function (event, cb) {\n    if (arguments.length === 1 && typeof event === 'function') return player.on('event', event)\n    var prop = 'on' + event\n    var old = player[prop]\n    player[prop] = old ? chain(old, cb) : cb\n    return player\n  }\n  return player\n}\n\nfunction chain (fn1, fn2) {\n  return function (a, b, c, d) { fn1(a, b, c, d); fn2(a, b, c, d) }\n}\n", "'use strict'\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nfunction regex () { return REGEX }\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11]\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true if the note is the tonic of something.\n * If true, en extra tonicOf property is returned. It's false by default.\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.\n * Can detect pitch class enhramonics.\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nfunction parse (str, isTonic, tuning) {\n  if (typeof str !== 'string') return null\n  var m = REGEX.exec(str)\n  if (!m || !isTonic && m[4]) return null\n\n  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }\n  p.pc = p.letter + p.acc\n  p.step = (p.letter.charCodeAt(0) + 3) % 7\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length\n  p.chroma = SEMITONES[p.step] + p.alt\n  if (m[3]) {\n    p.oct = +m[3]\n    p.midi = p.chroma + 12 * (p.oct + 1)\n    p.freq = midiToFreq(p.midi, tuning)\n  }\n  if (isTonic) p.tonicOf = m[4]\n  return p\n}\n\n/**\n * Given a midi number, return its frequency\n * @param {Integer} midi - midi note number\n * @param {Float} tuning - (Optional) the A4 tuning (440Hz by default)\n * @return {Float} frequency in hertzs\n */\nfunction midiToFreq (midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)\n}\n\nvar parser = { parse: parse, regex: regex, midiToFreq: midiToFreq }\nvar FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct', 'midi', 'freq']\nFNS.forEach(function (name) {\n  parser[name] = function (src) {\n    var p = parse(src)\n    return p && (typeof p[name] !== 'undefined') ? p[name] : null\n  }\n})\n\nmodule.exports = parser\n\n// extra API docs\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String} note - the note name\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n */\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n */\n", "'use strict'\n\nvar note = require('note-parser')\nvar isMidi = function (n) { return n !== null && n !== [] && n >= 0 && n < 129 }\nvar toMidi = function (n) { return isMidi(n) ? +n : note.midi(n) }\n\n// Adds note name to midi conversion\nmodule.exports = function (player) {\n  if (player.buffers) {\n    var map = player.opts.map\n    var toKey = typeof map === 'function' ? map : toMidi\n    var mapper = function (name) {\n      return name ? toKey(name) || name : null\n    }\n\n    player.buffers = mapBuffers(player.buffers, mapper)\n    var start = player.start\n    player.start = function (name, when, options) {\n      var key = mapper(name)\n      var dec = key % 1\n      if (dec) {\n        key = Math.floor(key)\n        options = Object.assign(options || {}, { cents: Math.floor(dec * 100) })\n      }\n      return start(key, when, options)\n    }\n  }\n  return player\n}\n\nfunction mapBuffers (buffers, toKey) {\n  return Object.keys(buffers).reduce(function (mapped, name) {\n    mapped[toKey(name)] = buffers[name]\n    return mapped\n  }, {})\n}\n", "'use strict'\n\nvar isArr = Array.isArray\nvar isObj = function (o) { return o && typeof o === 'object' }\nvar OPTS = {}\n\nmodule.exports = function (player) {\n  /**\n   * Schedule a list of events to be played at specific time.\n   *\n   * It supports three formats of events for the events list:\n   *\n   * - An array with [time, note]\n   * - An array with [time, object]\n   * - An object with { time: ?, [name|note|midi|key]: ? }\n   *\n   * @param {Float} time - an absolute time to start (or AudioContext's\n   * currentTime if provided number is 0)\n   * @param {Array} events - the events list.\n   * @return {Array} an array of ids\n   *\n   * @example\n   * // Event format: [time, note]\n   * var piano = player(ac, ...).connect(ac.destination)\n   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])\n   *\n   * @example\n   * // Event format: an object { time: ?, name: ? }\n   * var drums = player(ac, ...).connect(ac.destination)\n   * drums.schedule(0, [\n   *   { name: 'kick', time: 0 },\n   *   { name: 'snare', time: 0.5 },\n   *   { name: 'kick', time: 1 },\n   *   { name: 'snare', time: 1.5 }\n   * ])\n   */\n  player.schedule = function (time, events) {\n    var now = player.context.currentTime\n    var when = time < now ? now : time\n    player.emit('schedule', when, events)\n    var t, o, note, opts\n    return events.map(function (event) {\n      if (!event) return null\n      else if (isArr(event)) {\n        t = event[0]; o = event[1]\n      } else {\n        t = event.time; o = event\n      }\n\n      if (isObj(o)) {\n        note = o.name || o.key || o.note || o.midi || null\n        opts = o\n      } else {\n        note = o\n        opts = OPTS\n      }\n\n      return player.start(note, when + (t || 0), opts)\n    })\n  }\n  return player\n}\n", "(function(e){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=e()}else if(typeof define===\"function\"&&define.amd){define([],e)}else{var t;if(typeof window!==\"undefined\"){t=window}else if(typeof global!==\"undefined\"){t=global}else if(typeof self!==\"undefined\"){t=self}else{t=this}t.midimessage=e()}})(function(){var e,t,s;return function o(e,t,s){function a(n,i){if(!t[n]){if(!e[n]){var l=typeof require==\"function\"&&require;if(!i&&l)return l(n,!0);if(r)return r(n,!0);var h=new Error(\"Cannot find module '\"+n+\"'\");throw h.code=\"MODULE_NOT_FOUND\",h}var c=t[n]={exports:{}};e[n][0].call(c.exports,function(t){var s=e[n][1][t];return a(s?s:t)},c,c.exports,o,e,t,s)}return t[n].exports}var r=typeof require==\"function\"&&require;for(var n=0;n<s.length;n++)a(s[n]);return a}({1:[function(e,t,s){\"use strict\";Object.defineProperty(s,\"__esModule\",{value:true});s[\"default\"]=function(e){function t(e){this._event=e;this._data=e.data;this.receivedTime=e.receivedTime;if(this._data&&this._data.length<2){console.warn(\"Illegal MIDI message of length\",this._data.length);return}this._messageCode=e.data[0]&240;this.channel=e.data[0]&15;switch(this._messageCode){case 128:this.messageType=\"noteoff\";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 144:this.messageType=\"noteon\";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 160:this.messageType=\"keypressure\";this.key=e.data[1]&127;this.pressure=e.data[2]&127;break;case 176:this.messageType=\"controlchange\";this.controllerNumber=e.data[1]&127;this.controllerValue=e.data[2]&127;if(this.controllerNumber===120&&this.controllerValue===0){this.channelModeMessage=\"allsoundoff\"}else if(this.controllerNumber===121){this.channelModeMessage=\"resetallcontrollers\"}else if(this.controllerNumber===122){if(this.controllerValue===0){this.channelModeMessage=\"localcontroloff\"}else{this.channelModeMessage=\"localcontrolon\"}}else if(this.controllerNumber===123&&this.controllerValue===0){this.channelModeMessage=\"allnotesoff\"}else if(this.controllerNumber===124&&this.controllerValue===0){this.channelModeMessage=\"omnimodeoff\"}else if(this.controllerNumber===125&&this.controllerValue===0){this.channelModeMessage=\"omnimodeon\"}else if(this.controllerNumber===126){this.channelModeMessage=\"monomodeon\"}else if(this.controllerNumber===127){this.channelModeMessage=\"polymodeon\"}break;case 192:this.messageType=\"programchange\";this.program=e.data[1];break;case 208:this.messageType=\"channelpressure\";this.pressure=e.data[1]&127;break;case 224:this.messageType=\"pitchbendchange\";var t=e.data[2]&127;var s=e.data[1]&127;this.pitchBend=(t<<8)+s;break}}return new t(e)};t.exports=s[\"default\"]},{}]},{},[1])(1)});\n//# sourceMappingURL=dist/index.js.map", "var midimessage = require('midimessage')\n\nmodule.exports = function (player) {\n  /**\n  * Connect a player to a midi input\n  *\n  * The options accepts:\n  *\n  * - channel: the channel to listen to. Listen to all channels by default.\n  *\n  * @param {MIDIInput} input\n  * @param {Object} options - (Optional)\n  * @return {SamplePlayer} the player\n  * @example\n  * var piano = player(...)\n  * window.navigator.requestMIDIAccess().then(function (midiAccess) {\n  *   midiAccess.inputs.forEach(function (midiInput) {\n  *     piano.listenToMidi(midiInput)\n  *   })\n  * })\n  */\n  player.listenToMidi = function (input, options) {\n    var started = {}\n    var opts = options || {}\n    var gain = opts.gain || function (vel) { return vel / 127 }\n\n    input.onmidimessage = function (msg) {\n      var mm = msg.messageType ? msg : midimessage(msg)\n      if (mm.messageType === 'noteon' && mm.velocity === 0) {\n        mm.messageType = 'noteoff'\n      }\n      if (opts.channel && mm.channel !== opts.channel) return\n\n      switch (mm.messageType) {\n        case 'noteon':\n          started[mm.key] = player.play(mm.key, 0, { gain: gain(mm.velocity) })\n          break\n        case 'noteoff':\n          if (started[mm.key]) {\n            started[mm.key].stop()\n            delete started[mm.key]\n          }\n          break\n      }\n    }\n    return player\n  }\n  return player\n}\n", "'use strict'\n\nvar player = require('./player')\nvar events = require('./events')\nvar notes = require('./notes')\nvar scheduler = require('./scheduler')\nvar midi = require('./midi')\n\nfunction SamplePlayer (ac, source, options) {\n  return midi(scheduler(notes(events(player(ac, source, options)))))\n}\n\nif (typeof module === 'object' && module.exports) module.exports = SamplePlayer\nif (typeof window !== 'undefined') window.SamplePlayer = SamplePlayer\n", "'use strict'\n\n// util\nfunction fillStr (s, num) { return Array(num + 1).join(s) }\nfunction isNum (x) { return typeof x === 'number' }\nfunction isStr (x) { return typeof x === 'string' }\nfunction isDef (x) { return typeof x !== 'undefined' }\nfunction midiToFreq (midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)\n}\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nexport function regex () { return REGEX }\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11]\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true the strings it's supposed to contain a note number\n * and some category (for example an scale: 'C# major'). It's false by default,\n * but when true, en extra tonicOf property is returned with the category ('major')\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... 11 = B. Can be used to find enharmonics\n * since, for example, chroma of 'Cb' and 'B' are both 11\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nexport function parse (str, isTonic, tuning) {\n  if (typeof str !== 'string') return null\n  var m = REGEX.exec(str)\n  if (!m || (!isTonic && m[4])) return null\n\n  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }\n  p.pc = p.letter + p.acc\n  p.step = (p.letter.charCodeAt(0) + 3) % 7\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length\n  var pos = SEMITONES[p.step] + p.alt\n  p.chroma = pos < 0 ? 12 + pos : pos % 12\n  if (m[3]) { // has octave\n    p.oct = +m[3]\n    p.midi = pos + 12 * (p.oct + 1)\n    p.freq = midiToFreq(p.midi, tuning)\n  }\n  if (isTonic) p.tonicOf = m[4]\n  return p\n}\n\nvar LETTERS = 'CDEFGAB'\nfunction accStr (n) { return !isNum(n) ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n) }\nfunction octStr (n) { return !isNum(n) ? '' : '' + n }\n\n/**\n * Create a string from a parsed object or `step, alteration, octave` parameters\n * @param {Object} obj - the parsed data object\n * @return {String} a note string or null if not valid parameters\n * @since 1.2\n * @example\n * parser.build(parser.parse('cb2')) // => 'Cb2'\n *\n * @example\n * // it accepts (step, alteration, octave) parameters:\n * parser.build(3) // => 'F'\n * parser.build(3, -1) // => 'Fb'\n * parser.build(3, -1, 4) // => 'Fb4'\n */\nexport function build (s, a, o) {\n  if (s === null || typeof s === 'undefined') return null\n  if (s.step) return build(s.step, s.alt, s.oct)\n  if (s < 0 || s > 6) return null\n  return LETTERS.charAt(s) + accStr(a) + octStr(o)\n}\n\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String|Integer} note - the note name or midi number\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n * @example\n * // midi numbers are bypassed (even as strings)\n * parser.midi(60) // => 60\n * parser.midi('60') // => 60\n */\nexport function midi (note) {\n  if ((isNum(note) || isStr(note)) && note >= 0 && note < 128) return +note\n  var p = parse(note)\n  return p && isDef(p.midi) ? p.midi : null\n}\n\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name or note midi number\n * @param {String} tuning - (Optional) the A4 frequency (440 by default)\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n * @example\n * // can change tuning (440 by default)\n * parser.freq('A4', 444) // => 444\n * parser.freq('A3', 444) // => 222\n * @example\n * // it accepts midi numbers (as numbers and as strings)\n * parser.freq(69) // => 440\n * parser.freq('69', 442) // => 442\n */\nexport function freq (note, tuning) {\n  var m = midi(note)\n  return m === null ? null : midiToFreq(m, tuning)\n}\n\nexport function letter (src) { return (parse(src) || {}).letter }\nexport function acc (src) { return (parse(src) || {}).acc }\nexport function pc (src) { return (parse(src) || {}).pc }\nexport function step (src) { return (parse(src) || {}).step }\nexport function alt (src) { return (parse(src) || {}).alt }\nexport function chroma (src) { return (parse(src) || {}).chroma }\nexport function oct (src) { return (parse(src) || {}).oct }\n", "'use strict'\n\nvar parser = require('note-parser')\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont (ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected')\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\n\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl\n  this.ctx = ctx\n  this.instruments = {}\n  this.promises = []\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API')\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()')\n  Promise.all(this.promises).then(callback)\n}\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.')\n  console.log('Please use Soundfont.instrument() instead.')\n  var ctx = this.ctx\n  name = name || 'default'\n  if (name in this.instruments) return this.instruments[name]\n  var inst = {name: name, play: oscillatorPlayer(ctx, options)}\n  this.instruments[name] = inst\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play\n      return inst\n    })\n    this.promises.push(promise)\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      promise.then(cb)\n    }\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      cb()\n    }\n  }\n  return inst\n}\n\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\nfunction loadBuffers (ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.')\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.')\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers\n  })\n}\nSoundfont.loadBuffers = loadBuffers\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\nfunction oscillatorPlayer (ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {}\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.')\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note)\n    var freq = midi ? parser.midiToFreq(midi, 440) : null\n    if (!freq) return\n\n    duration = duration || 0.2\n\n    options = options || {}\n    var destination = options.destination || defaultOptions.destination || ctx.destination\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'\n    var gain = options.gain || defaultOptions.gain || 0.4\n\n    var vco = ctx.createOscillator()\n    vco.type = vcoType\n    vco.frequency.value = freq\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n\n    /* Connections */\n    vco.connect(vca)\n    vca.connect(destination)\n\n    vco.start(time)\n    if (duration > 0) vco.stop(time + duration)\n    return vco\n  }\n}\n\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\nSoundfont.noteToMidi = parser.midi\n\nmodule.exports = Soundfont\n", "'use strict'\n\nvar load = require('audio-loader')\nvar player = require('sample-player')\n\n/**\n * Load a soundfont instrument. It returns a promise that resolves to a\n * instrument object.\n *\n * The instrument object returned by the promise has the following properties:\n *\n * - name: the instrument name\n * - play: A function to play notes from the buffer with the signature\n * `play(note, time, duration, options)`\n *\n *\n * The valid options are:\n *\n * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n * - `nameToUrl` <Function>: a function to convert from instrument names to URL\n * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n * - `gain`: the gain of the player (1 by default)\n * - `notes`: an array of the notes to decode. It can be an array of strings\n * with note names or an array of numbers with midi note numbers. This is a\n * performance option: since decoding mp3 is a cpu intensive process, you can limit\n * limit the number of notes you want and reduce the time to load the instrument.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'\n * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers\n * @return {Promise}\n *\n * @example\n * var Soundfont = require('sounfont-player')\n * Soundfont.instrument('marimba').then(function (marimba) {\n *   marimba.play('C4')\n * })\n */\nfunction instrument (ac, name, options) {\n  if (arguments.length === 1) return function (n, o) { return instrument(ac, n, o) }\n  var opts = options || {}\n  var isUrl = opts.isSoundfontURL || isSoundfontURL\n  var toUrl = opts.nameToUrl || nameToUrl\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format)\n\n  return load(ac, url, { only: opts.only || opts.notes }).then(function (buffers) {\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination)\n    p.url = url\n    p.name = name\n    return p\n  })\n}\n\nfunction isSoundfontURL (name) {\n  return /\\.js(\\?.*)?$/i.test(name)\n}\n\n/**\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'\n * or 'MusyngKite' ('MusyngKite' by default)\n * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)\n * @returns {String} the Soundfont file url\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.nameToUrl('marimba', 'mp3')\n */\nfunction nameToUrl (name, sf, format) {\n  format = format === 'ogg' ? format : 'mp3'\n  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite'\n  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js'\n}\n\n// In the 1.0.0 release it will be:\n// var Soundfont = {}\nvar Soundfont = require('./legacy')\nSoundfont.instrument = instrument\nSoundfont.nameToUrl = nameToUrl\n\nif (typeof module === 'object' && module.exports) module.exports = Soundfont\nif (typeof window !== 'undefined') window.Soundfont = Soundfont\n"],
  "mappings": "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",
  "names": ["options", "opts", "isNum", "REGEX", "regex", "SEMITONES", "parse", "midiToFreq", "midi", "e", "t", "s", "n", "require_lib", "midi", "midi", "midi", "freq", "require_lib"]
}
